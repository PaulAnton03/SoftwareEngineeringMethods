openapi: 3.0.3
info:
  title: Delivery Specification
  description: This is a microservice for managing delivery in the YumYumNow company.
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
tags:
  - name: Order
  - name: Status
  - name: User
  - name: Admin
paths:
  /order:
    get:
      summary: Retrieve a list of all orders
      operationId: getOrders
      tags:
        - Order
      description: return a list of order objects
      responses:
        '200':
          description: Successful response, orders received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be retrieved because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve all orders
        '404':
          description: Unsuccessful, no orders were found
    post:
      summary: add a list of all orders
      operationId: postOrders
      tags:
        - Order
      description: add a list of order objects
      responses:
        '200':
          description: Successful response, orders added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be added because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add all orders
        '404':
          description: Unsuccessful, no orders were found
    put:
      summary: update the list of all orders
      operationId: updateOrders
      tags:
        - Order
      description: update the list of order objects
      responses:
        '200':
          description: Successful response, orders updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be updated because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update all orders
        '404':
          description: Unsuccessful, no orders were found
    delete:
      summary: delete the list of all orders
      operationId: deleteOrders
      tags:
        - Order
      description: delete the list of order objects
      responses:
        '200':
          description: Successful response, orders deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be deleted because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete all orders
        '404':
          description: Unsuccessful, no orders were found

  /order/{id}:
    get:
      summary: Retrieve an order given the order id
      operationId: getOrder
      tags:
        - Order
      description: return the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order to retrieve
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, order received
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, order cannot be retrieved because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve order
        '404':
          description: Unsuccessful, no order was found
    post:
      summary: add an order given the order id
      operationId: makeOrder
      tags:
        - Order
      description: add the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order to add
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: Order object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful response, order added
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, order cannot be added because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add order
        '404':
          description: Unsuccessful, no order was found
    put:
      summary: Update an order given the order id
      operationId: updateOrder
      tags:
        - Order
      description: update the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order to update
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: Order object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful response, order updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, order cannot be updated because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update order
        '404':
          description: Unsuccessful, no order was found
    delete:
      summary: Delete an order given the order id
      operationId: deleteOrder
      tags:
        - Order
      description: delete the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order to delete
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, order deleted
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, order cannot be deleted because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete order
        '404':
          description: Unsuccessful, no order was found

  /order/{id}/current:
    get:
      summary: Retrieve the current location of the courier with this order
      operationId: getOrderLocation
      tags:
        - Order
      description: return the location of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the location to retrieve
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, location received
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: Unsuccessful, location cannot be retrieved because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve order location
        '404':
          description: Unsuccessful, no location was found
    put:
      summary: Update the current location of the courier with this order
      operationId: updateLocation
      tags:
        - Order
      description: update the location of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the location to update
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: Location object 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Successful response, location updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: Unsuccessful, location cannot be updated because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update order location
        '404':
          description: Unsuccessful, no location was found

  /order/{id}/distance:
    get:
      operationId: getOrderDistance
      summary: Retrieve the current distance to the courier with this order
      tags:
        - Order
      description: return the distance between final delivery location and the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the distance to retrieve
          required: true
          schema:
            type: number
            format: int64
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, distance received
          content:
            application/json:
              schema:
                type: number
                format: float
        '400':
          description: Unsuccessful, distance cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no distance was found
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve order distance
    post:
      operationId: postOrderDistance
      summary: Add the current distance of the courier with this order
      tags:
        - Order
      description: add the distance of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the distance to add
          required: true
          schema:
            type: number
            format: int64
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, distance added
          content:
            application/json:
              schema:
                type: number
                format: float
        '400':
          description: Unsuccessful, distance cannot be added because of bad request
        '404':
          description: Unsuccessful, no distance was found
        '403':
          description: Unsuccessful, entity does not have access rights to post order distance
    put:
      operationId: putOrderDistance
      summary: Update the current distance of the courier with this order
      tags:
        - Order
      description: update the distance of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the distance to update
          required: true
          schema:
            type: number
            format: int64
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, distance updated
          content:
            application/json:
              schema:
                type: number
                format: float
        '400':
          description: Unsuccessful, distance cannot be updated because of bad request
        '404':
          description: Unsuccessful, no distance was found
        '403':
          description: Unsuccessful, entity does not have access rights to update order distance

  /order/{vendorId}:
    get:
      summary: Retrieve a list of all orders that belong to a given vendor
      operationId: putOrdersForVendor
      tags:
        - Order
      description: return a list of order objects that are assigned to specific vendor
      parameters:
        - name: vendorId
          in: path
          description: id of the vendor to retrieve the orders from
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, orders received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be retrieved because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve vendor orders
        '404':
          description: Unsuccessful, no orders were found
    post:
      summary: Add a list of all orders that belong to a given vendor
      operationId: makeOrdersForVendor
      tags:
        - Order
      description: add a list of order objects that are assigned to specific vendor
      parameters:
        - name: vendorId
          in: path
          description: id of the vendor to add the orders for
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, orders added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be added because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add vendor orders
        '404':
          description: Unsuccessful, no orders were found
    put:
      summary: Update a list of all orders that belong to a given vendor
      operationId: updateOrdersForVendor
      tags:
        - Order
      description: update a list of order objects that are assigned to specific vendor
      parameters:
        - name: vendorId
          in: path
          description: id of the vendor to update the orders for
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, orders updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be updated because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update vendor orders
        '404':
          description: Unsuccessful, no orders were found
    delete:
      summary: Delete a list of all orders that belong to a given vendor
      operationId: deleteOrdersForVendor
      tags:
        - Order
      description: delete a list of order objects that are assigned to specific vendor
      parameters:
        - name: vendorId
          in: path
          description: id of the vendor to delete the orders for
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, orders deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be deleted because of bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete vendor orders
        '404':
          description: Unsuccessful, no orders were found

  /order/{orderId}/rating:
    get:
      operationId: getOrderRating
      tags:
        - Order
      summary: Retrieve the rating of a specific order
      description: Retrieve the rating details for a specific order
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to retrieve rating
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, rating details for the specific order received
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  ratingNumber:
                    type: number
                  ratingComment:
                    type: string
        '404':
          description: Unsuccessful, no rating details found for the specified order
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve order rating
    put:
      operationId: putOrderRating
      tags:
        - Order
      summary: Change the rating number and comment
      description: Update both of the orders ratings
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to update rating
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: Order object where status, ratingNumber and ratingComment are updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '204':
          description: Successful update of rating
        '400':
          description: Invalid arguments offered
        '404':
          description: OrderId was not found
        '401':
          description: Unauthorized
        '403':
          description: Unsuccessful, entity does not have access rights to update order rating

  /order/{orderId}/pickupDestination:
    get:
      operationId: getPickupDestination
      summary: Retrieve vendor location of the order
      tags:
        - Order
      description: Return the vendor location of the specified order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, vendor location of the order received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Unsuccessful, vendor location of the order cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve vendor location
        '404':
          description: Unsuccessful, vendor location for the order not found

  /order/{orderId}/finalDestination:
    get:
      operationId: getFinalDestination
      summary: Get the final destination of a specific order
      tags:
        - Order
      description: Retrieve the final destination of an order
      parameters:
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to get its final destination
      responses:
        '200':
          description: Successful response, order found and final destination can be retrieved
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve final destination
        '404':
          description: Unsuccessful, order not found by id
    put:
      operationId: putFinalDestination
      summary: Change the final destination where the order will be delivered to
      tags:
        - Order
      description: Update the final destination, changing where the order will be delivered
      parameters:
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to change its final destination
      requestBody:
        description: Order object where final destination is changed
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '204':
          description: Successful update of final destination
        '400':
          description: Invalid arguments
        '403':
          description: Unsuccessful, entity does not have access rights to update final destination
        '404':
          description: OrderId was not found
        '401':
          description: Unauthorized

  /order/{orderId}/ETA:
    get:
      operationId: getETA
      summary: Get the ETA of an order
      tags:
        - Order
      description: return the ETA of an order
      parameters:
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to get it's ETA
      responses:
        '200':
          description: Successful response, order found
          content:
            application/json:
              schema:
                type: string
                format: date-time
        '400':
          description: Invalid arguments
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve estimated time of arrival
        '404':
          description: Unsuccessful, order not found

  /independent-orders:
    get:
      summary: Retrieve independent orders
      operationId: getIndependentOrders
      tags:
        - User
      description: Return a list of independent orders (orders from independent couriers), independent orders being orders from vendors that do not have couriers of their own. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, independent orders received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, independent orders cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve independent orders
        '404':
          description: Unsuccessful, no independent orders were found
    post:
      summary: Add independent orders
      operationId: makeOrdersForVendor
      tags:
        - User
      description: Add a list of independent orders (orders from independent vendors), independent orders being orders from vendors that do not have couriers of their own. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful response, independent orders added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, independent orders cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add independent orders
        '404':
          description: Unsuccessful, no independent orders were found
    put:
      summary: Update independent orders
      operationId: updateIndependentOrder
      tags:
        - User
      description: Update a list of independent orders (orders from independent couriers), independent orders being orders from vendors that do not have couriers of their own. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful response, independent orders updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, independent orders cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update independent orders
        '404':
          description: Unsuccessful, no independent orders were found
    delete:
      summary: Delete independent orders,
      operationId: deleteIndependentOrders
      tags:
        - User
      description: Delete a list of independent orders (orders from independent couriers), independent orders being orders from vendors that do not have couriers of their own. To be used by admin.
      responses:
        '200':
          description: Successful response, independent orders deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, independent orders cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete independent orders
        '404':
          description: Unsuccessful, no independent orders were found

  /vendors:
    get:
      summary: Retrieve all vendors
      operationId: getVendors
      tags:
        - User
      description: Return a list of all vendors currently known. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, all vendors received by admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
        '400':
          description: Unsuccessful, vendors cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve vendors
        '404':
          description: Unsuccessful, no vendors were found
    post:
      summary: Add all vendors
      operationId: makeVendors
      tags:
        - User
      description: Add a list of all current vendors to the database. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Vendor'
      responses:
        '200':
          description: Successful response, all vendors added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
        '400':
          description: Unsuccessful, vendors cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add vendors
        '404':
          description: Unsuccessful, no vendors were found
    put:
      summary: Update all vendors
      operationId: updateVendors
      tags:
        - User
      description: Update a list of all vendors. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Vendor'
      responses:
        '200':
          description: Successful response, all vendors updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
        '400':
          description: Unsuccessful, vendors cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update vendors
        '404':
          description: Unsuccessful, no vendors were found
    delete:
      summary: Delete all vendors
      operationId: deleteAllVendors
      tags:
        - User
      description: Delete the list of all vendors. To be used by admin.
      responses:
        '200':
          description: Successful response, all vendors deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
        '400':
          description: Unsuccessful, vendors cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete vendors
        '404':
          description: Unsuccessful, no vendors were found

  /couriers:
    get:
      summary: Retrieve all couriers
      operationId: getCouriers
      tags:
        - User
      description: Return a list of all couriers. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, all couriers received by admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, couriers cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve couriers
        '404':
          description: Unsuccessful, no couriers were found
    post:
      summary: Add all couriers
      operationId: makeCouriers
      tags:
        - User
      description: Add a list of all couriers to the database. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Courier'
      responses:
        '200':
          description: Successful response, all couriers added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, couriers cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add couriers
        '404':
          description: Unsuccessful, no couriers were found
    put:
      summary: Update all couriers
      operationId: updateCouriers
      tags:
        - User
      description: Update a list of all couriers. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Courier'
      responses:
        '200':
          description: Successful response, all couriers updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, couriers cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update couriers
        '404':
          description: Unsuccessful, no couriers were found
    delete:
      summary: Delete all couriers
      operationId: deleteCouriers
      tags:
        - User
      description: Delete a list of all couriers. To be used by admin.
      responses:
        '200':
          description: Successful response, all couriers deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, couriers cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete couriers
        '404':
          description: Unsuccessful, no couriers were found

  /couriers/{courierId}:
    get:
      summary: Retrieve a courier given the courier id
      operationId: getCourier
      tags:
        - User
      description: return the courier corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the courier to retrieve
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, courier received
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, courier cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no courier was found
        '403':
          description: Unauthorized

  /dependent-couriers:
    get:
      summary: Retrieve dependent couriers
      operationId: getDepCouriers
      tags:
        - User
      description: Return a list of dependent couriers (couriers that belong to a vendor), dependent courier being a courier that works for a specific vendor, they can only take orders from that vendor. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, dependent couriers received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, dependent couriers cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve dependent couriers
        '404':
          description: Unsuccessful, no dependent couriers were found
    post:
      summary: Add dependent couriers
      tags:
        - User
      description: Add a list of dependent couriers (couriers that belong to a vendor), dependent courier being a courier that works for a specific vendor, they can only take orders from that vendor. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Courier'
      responses:
        '200':
          description: Successful response, dependent couriers added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, dependent couriers cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add dependent couriers
        '404':
          description: Unsuccessful, no dependent couriers were found
    put:
      summary: Update dependent couriers
      operationId: updateDepCouriers
      tags:
        - User
      description: Update a list of dependent couriers (couriers that belong to a vendor), dependent courier being a courier that works for a specific vendor, they can only take orders from that vendor. To be used by admin.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Courier'
      responses:
        '200':
          description: Successful response, dependent couriers updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, dependent couriers cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update dependent couriers
        '404':
          description: Unsuccessful, no dependent couriers were found
    delete:
      summary: Delete dependent couriers
      operationId: deleteDepCouriers
      tags:
        - User
      description: Delete a list of dependent couriers (couriers that belong to a vendor), dependent courier being a courier that works for a specific vendor, they can only take orders from that vendor. To be used by admin.
      responses:
        '200':
          description: Successful response, dependent couriers deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, dependent couriers cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete dependent couriers
        '404':
          description: Unsuccessful, no dependent couriers were found

  /independent-couriers:
    get:
      summary: Retrieve independent couriers
      operationId: getIndCouriers
      tags:
        - User
      description: Return a list of independent couriers (couriers that do not depend on vendors), independent couriers being couriers that do not belong to a vendor, they can chose whichever order they can take. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, independent couriers received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, independent couriers cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve independent couriers
        '404':
          description: Unsuccessful, no independent couriers were found
    post:
      summary: Add independent couriers
      operationId: makeIndCouriers
      tags:
        - User
      description: Add a list of independent couriers (couriers that do not depend on vendors), independent couriers being couriers that do not belong to a vendor, they can chose whichever order they can take. To be used by admin.
      responses:
        '200':
          description: Successful response, independent couriers added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, independent couriers cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add independent couriers
        '404':
          description: Unsuccessful, no independent couriers were found
    put:
      summary: Update independent couriers
      operationId: updateIndCouriers
      tags:
        - User
      description: Update a list of independent couriers (couriers that do not depend on vendors), independent couriers being couriers that do not belong to a vendor, they can chose whichever order they can take. To be used by admin.
      responses:
        '200':
          description: Successful response, independent couriers updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, independent couriers cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update independent couriers
        '404':
          description: Unsuccessful, no independent couriers were found
    delete:
      summary: Delete independent couriers
      operationId: deleteIndCouriers
      tags:
        - User
      description: Delete a list of independent couriers (couriers that do not depend on vendors), independent couriers being couriers that do not belong to a vendor, they can chose whichever order they can take. To be used by admin.
      responses:
        '200':
          description: Successful response, independent couriers deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, independent couriers cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete independent couriers
        '404':
          description: Unsuccessful, no independent couriers were found

  /customers:
    get:
      summary: Retrieve all customers
      operationId: getCustomers
      tags:
        - User
      description: Return a list of all customers that have placed an order. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, all customers received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Unsuccessful, customers cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve customers
        '404':
          description: Unsuccessful, no customers were found
    post:
      summary: Add all customers
      operationId: makeCustomers
      tags:
        - User
      description: Add a list of all customers that have placed an order. To be used by admin.
      responses:
        '200':
          description: Successful response, all customers added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Unsuccessful, customers cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add customers
        '404':
          description: Unsuccessful, no customers were found
    put:
      summary: Update all customers
      operationId: updateCustomers
      tags:
        - User
      description: Update a list of all customers that have placed an order. To be used by admin.
      responses:
        '200':
          description: Successful response, all customers updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Unsuccessful, customers cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update customers
        '404':
          description: Unsuccessful, no customers were found
    delete:
      summary: Delete all customers
      tags:
        - User
      description: Delete a list of all customers that have placed an order. To be used by admin.
      responses:
        '200':
          description: Successful response, all customers deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Unsuccessful, customers cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete customers
        '404':
          description: Unsuccessful, no customers were found

  /exceptions:
    get:
      summary: Retrieve all exceptions
      operationId: getExceptions
      tags:
        - Admin
      description: Return a list of all exceptions collected from orders. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, all exceptions received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, exceptions cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve exceptions
        '404':
          description: Unsuccessful, no exceptions were found
    post:
      summary: Add all exceptions
      operationId: makeExceptions
      tags:
        - Admin
      description: Add a list of all exceptions collected from orders. To be used by admin.
      responses:
        '200':
          description: Successful response, all exceptions added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, exceptions cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add exceptions
        '404':
          description: Unsuccessful, no exceptions were found
    put:
      summary: Update all exceptions
      operationId: updateExceptions
      tags:
        - Admin
      description: Update a list of all exceptions collected from orders. To be used by admin.
      responses:
        '200':
          description: Successful response, all exceptions updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, exceptions cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update exceptions
        '404':
          description: Unsuccessful, no exceptions were found
    delete:
      summary: Delete all exceptions
      operationId: deleteExceptions
      tags:
        - Admin
      description: Delete a list of all exceptions collected from orders. To be used by admin.
      responses:
        '200':
          description: Successful response, all exceptions deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, exceptions cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete exceptions
        '404':
          description: Unsuccessful, no exceptions were found

  /exceptions/{id}:
    get:
      summary: Retrieve exception for a specific order
      operationId: getExceptionForOrder
      tags:
        - Admin
      description: Return exception information for a specific order. To be used by admin.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, exception for the specific order received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, specific exception cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve specific exception
        '404':
          description: Unsuccessful, no specific exception was found
    post:
      summary: Add exception for a specific order
      operationId: makeException
      tags:
        - Admin
      description: Add exception information for a specific order. To be used by admin.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response, exception for the specific order added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, specific exception cannot be added because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to add specific exception
        '404':
          description: Unsuccessful, no specific exception was found
    put:
      summary: Update exception for a specific order
      operationId: updateException
      tags:
        - Admin
      description: Update exception information for a specific order. To be used by admin.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response, exception for the specific order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, specific exception cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update specific exception
        '404':
          description: Unsuccessful, no specific exception was found
    delete:
      summary: Delete exception for a specific order
      operationId: deleteException
      tags:
        - Admin
      description: Delete exception information for a specific order. To be used by admin.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response, exception for the specific order deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, specific exception cannot be deleted because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to delete specific exception
        '404':
          description: Unsuccessful, no specific exception was found

  /vendor/radius/{id}:
    get:
      summary: Retrieve radius from specific vendor
      operationId: getRadiusForVendor
      tags:
        - Admin
      description: Return the maximum radius of delivery of a specific vendor. To be used by admin.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: the userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, radius for the specific vendor received
          content:
            application/json:
              schema:
                type: object
                properties:
                  radius:
                    type: number
                    format: double
        '400':
          description: Unsuccessful, specific radius cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve specific radius
        '404':
          description: Unsuccessful, no specific radius was found
    put:
      summary: Update radius from specific vendor
      operationId: updateRadiusForVendor
      tags:
        - Admin
      description: Update radius of a specific vendor. To be used by admin.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Radius object where radius is updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                radius:
                  type: number
                  format: double
      responses:
        '204':
          description: Successful response, radius for the specific vendor updated
        '400':
          description: Unsuccessful, specific radius cannot be updated because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to update radius
        '404':
          description: Unsuccessful, no specific radius was found

  /orders/status/delivered:
    get:
      operationId: getDeliveredOrders
      summary: Retrieve delivered orders
      tags:
        - Admin
      description: Return a list of orders with a status of delivered. To be used by admin.
      parameters:
        - name: Authorization
          in: header
          description: The userId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, delivered orders received by admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, delivered orders cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve delivered orders
        '404':
          description: Unsuccessful, no delivered orders were found

  /status/{orderId}/accepted:
    put:
      tags:
        - Status
      summary: Change the order status from pending to accepted
      operationId: updateToAccepted
      description: Update the order status to accepted
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to change status
        - in: header
          name: Authorization
          description: The userId to check if they have the rights to make a request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to accepted
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '403':
          description: Unauthorized

  /status/{orderId}/rejected:
    put:
      summary: Set status to “rejected”
      operationId: updateToRejected
      tags:
        - Status
      description: Sends an exception, goes from “pending” to [said by vendor] “rejected”
      parameters:
        - in: path
          name: orderId
          description: Id of the order to change status
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to rejected
        '400':
          description: Invalid arguments
        '403':
          description: Unauthorized
        '404':
          description: Order not found

  /status/{orderId}/preparing:
    put:
      tags:
        - Status
      summary: Change the order status from accepted to preparing
      operationId: updateToPreparing
      description: Update the order status to preparing
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of order to change status
        - in: header
          name: Authorization
          description: The userId to check if they have the rights to make a request
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/PreparingRequestBody'
      responses:
        '204':
          description: Successful update of status to preparing
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '403':
          description: Unauthorized

  /status/{orderId}/giventocourier:
    put:
      summary: Set status to “given to courier”
      operationId: updateToGivenToCourier
      tags:
        - Status
      description: Goes from “preparing” to [said by vendor] “given to courier” and set the courierID
      requestBody:
        $ref: '#/components/requestBodies/GivenToCourierRequestBody'
      parameters:
        - in: path
          name: orderId
          description: Id of the order to change status
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to "given to courier"
        '400':
          description: Invalid arguments
        '403':
          description: Unauthorized
        '404':
          description: Order not found

  /status/{orderId}/intransit:
    put:
      tags:
        - Status
      summary: Change the order status from accepted to in-transit
      description: Update the order status to in-transit
      operationId: updateToInTransit
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of order to change status
        - in: header
          name: Authorization
          description: The userId to check if they have the rights to make a request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to in-transit
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '403':
          description: Unauthorized

  /status/{orderId}/delivered:
    put:
      summary: Set status to “delivered”
      operationId: updateToDelivered
      tags:
        - Status
      description: Goes from “in transit” to [said by courier] “delivered” and set the actualDeliveryTime
      parameters:
        - in: path
          name: orderId
          description: Id of the order to change status
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/DeliveredRequestBody'
      responses:
        '204':
          description: Successful update of status to delivered
        '400':
          description: Invalid arguments
        '403':
          description: Unauthorized
        '404':
          description: Order not found

components:
  schemas:
    Order:
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
            - preparing
            - given to courier
            - on-transit
            - delivered
          description: the current status of the order expressed as one of the above options
        id:
          type: number
          format: int64
          description: the unique id of an order
        deliveryDestination:
          $ref: '#/components/schemas/Location'
        customerId:
          type: number
          format: int64
          example: 66
          description: id of the customer that placed the order
        vendorId:
          type: number
          format: int64
          example: 77
          description: the id of the vendor that is preparing the order
        courierId:
          type: number
          format: int64
          example: 88
          description: the id of the courier that is delivering the order
        ratingNumber:
          type: integer
          example: 5
          description: an integer out of 5 that rates how good the order was
        ratingComment:
          type: string
          example: "horrible food, mean courier"
          description: a small message to give opinions on the order
        orderTime:
          type: string
          format: date-time
          example: 2023-11-28T15:30:00Z
          description: the time the order was placed by the customer
        prepTime:
          type: string
          format: time
          description: the time it takes to prepare the order in format "HH:MM:SS"
          example: '01:30:00'
        expectedDeliveryTime:
          type: string
          format: date-time
          description: the time the order will be planned to be delivered
        actualDeliveryTime:
          type: string
          format: date-time
          description: the time the order actually is delivered
    User:
      properties:
        id:
          type: number
          format: int64
          example: 66
    Vendor:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
      properties:
        radius:
          type: number
          format: double
          description: the maximum radius a vendor is able to take orders from
        location:
          $ref: '#/components/schemas/Location'
        hasCouriers:
          description: to indicate if a vendor has specific couriers that are assigned to them, and can only take requests from them
          type: boolean
        orders:
          type: array
          description: a queue of all the ids of the orders for that vendor, independent orders being
          items:
            type: number
            format: int64
    Customer:
      description: user that places the order
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
    Courier:
      description: The user that delivers the given order.
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
      properties:
        currentLocation:
          $ref: '#/components/schemas/Location'
        bossId:
          type: number
          format: int64
          example: 666
          description: a reference to the specific vendor the courier works for, a reference to the admin (which is 1 person) if the courier is independent, meaning courier has a list of orders to choose from and is not dependent on a vendor
    DeliveryException:
      description: General exception class more specific exceptions inherit from. Thrown whenever there is any kind of problem with the order
      properties:
        orderId:
          type: number
          format: int64
          description: the id of the order that the exception happened on
        message:
          type: string
          description: explanation of what went wrong with the order
          example: "Order was not delivered"
    LateDelivery:
      description: Thrown when an order is delivered late, when the actual delivery time is bigger than estimated delivery time
      allOf:
        - $ref: '#/components/schemas/DeliveryException'
    NotDelivered:
      description: Thrown when an order is not delivered at all
      allOf:
        - $ref: '#/components/schemas/DeliveryException'
    Rejected:
      description: Thrown when an order is rejected by the vendor, possible by the courier in unforeseen circumstances
      allOf:
        - $ref: '#/components/schemas/DeliveryException'
    Location:
      description: Any kind of address expressed as a longitude and latitude
      type: object
      properties:
        latitude:
          type: number
          format: float
          example: 23.92488
        longitude:
          type: number
          format: float
          example: 74.7099

  requestBodies:
    PreparingRequestBody:
      description: Request body for status change from accepted to preparing
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              prepTime:
                type: string
                format: time
                description: the time it takes to prepare the order in format "HH:MM:SS"
                example: '01:30:00'
              expectedDeliveryTime:
                type: string
                format: date-time
                description: the time the order will be planned to be delivered
    GivenToCourierRequestBody:
      description: Request body for status change from preparing to given to courier
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              courierId:
                type: number
                format: int64
                example: 88
    DeliveredRequestBody:
      description: Request body for status change from in-transit to delivered
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              actualDeliveryTime:
                type: string
                format: date-time
                description: the time the order actually is delivered
