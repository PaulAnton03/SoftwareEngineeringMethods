openapi: 3.0.3
info:
  title: Delivery Specification
  description: Title
  version: 1.0.0
servers:
  - url: 'https'
tags:
  - name: Order
  - name: Status
  - name: Admin
paths:
  /order:
    get:
      summary: Retrieve a list of all orders
      tags:
        - Order
      description: return a list of order objects
      responses:
        '200':
          description: Successful response, orders received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no orders were found
  /order/{id}:
    get:
      summary: Retrieve an order given the order id
      tags:
        - Order
      description: return the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order to retrieve
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, order received
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, order cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no order was found
    put:
      summary: Update an order given the order id
      tags:
        - Order
      description: update the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order to update
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, order updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, order cannot be updated because of bad request
        '404':
          description: Unsuccessful, no order was found
  /order/{id}/current:
    get:
      summary: Retrieve the current location of the courier with this order
      tags:
        - Order
      description: return the location of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the location to retrieve
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, location received
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: Unsuccessful, location cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no location was found
    put:
      summary: Update the current location of the courier with this order
      tags:
        - Order
      description: update the location of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the location to update
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: Location object 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Successful response, location updated
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Location'
        '400':
          description: Unsuccessful, location cannot be updated because of bad request
        '404':
          description: Unsuccessful, no location was found
  /order/{id}/distance:
    get:
      summary: Retrieve the current distance to the courier with this order
      tags:
        - Order
      description: return the distance to the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the distance to retrieve
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, distance received
          content:
            application/json:
              schema:
                type: number
                format: float
        '400':
          description: Unsuccessful, distance cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no distance was found
    put:
      summary: Update the current distance of the courier with this order
      tags:
        - Order
      description: update the distance of the courier who has the order corresponding to the id
      parameters:
        - name: id
          in: path
          description: id of the order with the distance to update
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, distance updated
          content:
            application/json:
              schema:
                type: number
                format: float
        '400':
          description: Unsuccessful, distance cannot be updated because of bad request
        '404':
          description: Unsuccessful, no distance was found
  /order/{vendorId}:
    get:
      summary: Retrieve a list of all orders that belong to a given vendor
      tags:
        - Order
      description: return a list of order objects that are assigned to specific vendor
      parameters:
        - name: vendorId
          in: path
          description: id of the vendor to retrieve the orders from
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, orders received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be retrieved because of bad request
        '404':
          description: Unsuccessful, no orders were found
    put:
      summary: Update a list of all orders that belong to a given vendor
      tags:
        - Order
      description: update a list of order objects that are assigned to specific vendor
      parameters:
        - name: vendorId
          in: path
          description: id of the vendor to update the orders for
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Successful response, orders updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, orders cannot be updated because of bad request
        '404':
          description: Unsuccessful, no orders were found

  /independent-orders:
    get:
      summary: Retrieve independent orders for admin
      tags:
        - Admin
      description: Return a list of independent orders (orders from admin couriers) for admin
      responses:
        '200':
          description: Successful response, independent orders received by admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Unsuccessful, independent orders for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve independent orders
        '404':
          description: Unsuccessful, no independent orders for admin were found

  /vendors:
    get:
      summary: Retrieve all vendors
      tags:
        - Admin
      description: Return a list of all vendors for admin
      responses:
        '200':
          description: Successful response, all vendors received by admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
        '400':
          description: Unsuccessful, vendors cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve vendors
        '404':
          description: Unsuccessful, no vendors were found

  /couriers:
    get:
      summary: Retrieve all couriers
      tags:
        - Admin
      description: Return a list of all couriers for admin
      responses:
        '200':
          description: Successful response, all couriers received by admin
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, couriers cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve couriers
        '404':
          description: Unsuccessful, no couriers were found

  /dependent-couriers:
    get:
      summary: Retrieve dependent couriers for admin
      tags:
        - Admin
      description: Return a list of dependent couriers (couriers that belong to a vendor) for admin
      responses:
        '200':
          description: Successful response, dependent couriers for admin received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, dependent couriers for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve dependent couriers
        '404':
          description: Unsuccessful, no dependent couriers for admin were found

  /independent-couriers:
    get:
      summary: Retrieve independent couriers for admin
      tags:
        - Admin
      description: Return a list of independent couriers (couriers that do not depend on vendors) for admin
      responses:
        '200':
          description: Successful response, independent couriers for admin received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
        '400':
          description: Unsuccessful, independent couriers for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve independent couriers
        '404':
          description: Unsuccessful, no independent couriers for admin were found

  /customers:
    get:
      summary: Retrieve all customers for admin
      tags:
        - Admin
      description: Return a list of all customers that have placed an order for admin
      responses:
        '200':
          description: Successful response, all customers for admin received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Unsuccessful, customers for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve customers
        '404':
          description: Unsuccessful, no customers for admin were found

  /exceptions:
    get:
      summary: Retrieve all exceptions for admin
      tags:
        - Admin
      description: Return a list of all exceptions collected from orders for admin
      responses:
        '200':
          description: Successful response, all exceptions for admin received
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, exceptions for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve exceptions
        '404':
          description: Unsuccessful, no exceptions for admin were found

  /exceptions/{id}:
    get:
      summary: Retrieve exception for a specific order for admin
      tags:
        - Admin
      description: Return exception information for a specific order for admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response, exception for the specific order for admin received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryException'
        '400':
          description: Unsuccessful, specific exception for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve specific exception
        '404':
          description: Unsuccessful, no specific exception for admin was found

  /vendor/radius/{id}:
    get:
      summary: Retrieve radius from specific vendor for admin
      tags:
        - Admin
      description: Return radius of a specific vendor for admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response, radius for the specific vendor for admin received
          content:
            application/json:
              schema:
                type: object
                properties:
                  radius:
                    type: number
                    format: double
        '400':
          description: Unsuccessful, specific radius for admin cannot be retrieved because of a bad request
        '403':
          description: Unsuccessful, entity does not have access rights to retrieve specific radius
        '404':
          description: Unsuccessful, no specific radius for admin was found
    put:
      summary: Update radius from specific vendor for admin
      tags:
        - Admin
      description: Update radius of a specific vendor for admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Radius object where radius is updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                radius:
                  type: number
                  format: double
      responses:
        '204':
          description: Successful response, radius for the specific vendor for admin updated
        '400':
          description: Unsuccessful, specific radius for admin cannot be updated because of a bad request
        '404':
          description: Unsuccessful, no specific radius for admin was found

  /order/{orderId}/rating:
    put:
      tags:
        - Order
      summary: Change the rating number and comment
      description: Update both of the orders ratings
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to update rating
      requestBody:
        description: Order object where status, ratingNumber and ratingComment are updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '204':
          description: Successful update of status to accepted
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '401':
          description: Unauthorized

  /order/{orderId}/ETA:
    get:
      summary: Get the ETA of an order
      tags:
        - Order
      description: return the ETA of an order
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to get it's ETA
      responses:
        '200':
          description: Successful response, order found
          content:
            application/json:
              schema:
                type: string
                format: date-time
        '400':
          description: Invalid arguments
        '404':
          description: Unsuccessful, order not found

  /status/{orderId}/accepted:
    put:
      tags:
        - Status
      summary: Change the order status from pending to accepted
      description: Update the order status to accepted
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of the order to change status
        - in: header
          name: Authorization
          description: The userId to check if they have the rights to make a request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to accepted
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '403':
          description: Unauthorized

  /status/{orderId}/rejected:
    put:
      summary: Set status to “rejected”
      tags:
        - Status
      description: Sends an exception, goes from “pending” to [said by vendor] “rejected”
      parameters:
        - in: path
          name: orderId
          description: Id of the order to change status
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to rejected
        '400':
          description: Invalid arguments
        '403':
          description: Unauthorized
        '404':
          description: Order not found

  /status/{orderId}/preparing:
    put:
      tags:
        - Status
      summary: Change the order status from accepted to preparing
      description: Update the order status to preparing
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of order to change status
        - in: header
          name: Authorization
          description: The userId to check if they have the rights to make a request
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: PreparingDTO object containing eta and prepTime
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/PreparingDTO'
      responses:
        '204':
          description: Successful update of status to preparing
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '403':
          description: Unauthorized

  /status/{orderId}/giventocourier:
    put:
      summary: Set status to “given to courier”
      tags:
        - Status
      description: Goes from “preparing” to [said by vendor] “given to courier” and set the courierID
      requestBody:
        required: true
        description: Order object where status and courierId are updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - in: path
          name: orderId
          description: Id of the order to change status
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to "given to courier"
        '400':
          description: Invalid arguments
        '403':
          description: Unauthorized
        '404':
          description: Order not found

  /status/{orderId}/intransit:
    put:
      tags:
        - Status
      summary: Change the order status from accepted to in-transit
      description: Update the order status to in-transit
      parameters:
        - in: path
          name: orderId
          schema:
            type: number
            format: int64
          required: true
          description: Id of order to change status
        - in: header
          name: Authorization
          description: The userId to check if they have the rights to make a request
          required: true
          schema:
            type: number
            format: int64
      responses:
        '204':
          description: Successful update of status to in-transit
        '400':
          description: Invalid arguments
        '404':
          description: Order not found
        '403':
          description: Unauthorized

  /status/{orderId}/delivered:
    put:
      summary: Set status to “delivered”
      tags:
        - Status
      description: Goes from “in transit” to [said by courier] “delivered” and set the actualDeliveryTime
      parameters:
        - in: path
          name: orderId
          description: Id of the order to change status
          required: true
          schema:
            type: number
            format: int64
        - in: header
          name: Authorization
          description: the UserId to check if they have the rights to make this request
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: Order object where status and actualDeliveryTime are updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '204':
          description: Successful update of status to delivered
        '400':
          description: Invalid arguments
        '403':
          description: Unauthorized
        '404':
          description: Order not found

components:
  schemas:
    Order:
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
            - preparing
            - given to courier
            - on-transit
            - delivered
        id:
          type: number
          format: int64
        deliveryDestination:
          $ref: '#/components/schemas/Location'
        customerId:
          type: number
          format: int64
          example: 66
        vendorId:
          type: number
          format: int64
          example: 77
        courierId:
          type: number
          format: int64
          example: 88
        ratingNumber:
          type: integer
          example: 5
        ratingComment:
          type: string
        orderTime:
          type: string
          format: date-time
          example: 2023-11-28T15:30:00Z
          description: the time the order was made
        prepTime:
          type: string
          format: time
          description: the time it takes to prepare the order in format "HH:MM:SS"
          example: '01:30:00'
        expectedDeliveryTime:
          type: string
          format: date-time
          description: the time the order will be planned to be delivered
        actualDeliveryTime:
          type: string
          format: date-time
          description: the time the order actually is delivered
    User:
      properties:
        id:
          type: number
          format: int64
          example: 66
    Vendor:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
      properties:
        radius:
          type: number
          format: double
        location:
          $ref: '#/components/schemas/Location'
        hasCouriers:
          description: to indicate if a vendor has specific couriers that are assigned to them, and can only take requests from them
          type: boolean
        independentOrders:
          type: array
          description: a queue of all the ids of the independent orders
          items:
            type: number
            format: int64
    Customer:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
    Courier:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
      properties:
        currentLocation:
          $ref: '#/components/schemas/Location'
        bossId:
          type: number
          format: int64
          example: 666
    DeliveryException:
      properties:
        orderId:
          type: number
          format: int64
          description: the id of the order that the exception happened on
        message:
          type: string
          description: explanation of what went wrong with the order
          example: "Order was not delivered"
    LateDelivery:
      allOf:
        - $ref: '#/components/schemas/DeliveryException'
    NotDelivered:
      allOf:
        - $ref: '#/components/schemas/DeliveryException'
    Rejected:
      allOf:
        - $ref: '#/components/schemas/DeliveryException'
    Location:
      type: object
      properties:
        latitude:
          type: number
          format: float
          example: 23.92488
        longitude:
          type: number
          format: float
          example: 74.7099
  requestBodies:
    PreparingDTO:
      description: Request body for status change from accepted to preparing
      content:
        application/json:
          schema:
            type: object
            properties:
              prepTime:
                type: string
                format: time
                description: the time it takes to prepare the order in format "HH:MM:SS"
                example: '01:30:00'
              expectedDeliveryTime:
                type: string
                format: date-time
                description: the time the order will be planned to be delivered
